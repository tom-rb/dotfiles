#######################
###  SANITY CHECKS  ###
#######################

# Tmux should be in path
if-shell '! command -v tmux >/dev/null' "run-shell -b 'echo \"tmux is not in PATH! Please, make it findable.\"'"

# User option @conf_dir should be set by install_tmux.sh
%if #{==:#{@conf_dir},}
run-shell -b "echo '@conf_dir variable not set! Some functionality will not work properly.'"
%endif

#######################
###     GENERAL     ###
#######################

# Pass focus events from terminal to applications in tmux (useful for vim integration)
set -g focus-events on

# Start numbering windows and panes at 1
set -g base-index 1
setw -g pane-base-index 1

# Start a non-login shell (instead of default login one)
set -g default-command "${SHELL}"

# Show pane numbers for a bit longer (when choosing with q)
set -g display-panes-time 2000

#
# Some sensible tmux configs
# https://github.com/tmux-plugins/tmux-sensible
#

# Address vim mode switching delay (http://superuser.com/a/252717/65504)
set -sg escape-time 0

# Increase scrollback buffer size
set -g history-limit 50000

# Tmux messages display ms
set -g display-time 2000

# Assume better $TERM
set -g default-terminal "screen-256color"

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

#######################
###   KEYBINDINGS   ###
#######################

# Remap prefix to C-g
unbind C-b
set -g prefix C-g
bind C-g send-prefix

# Easy reload tmux config with r
bind r run-shell 'tmux source-file #{@conf_dir}/tmux.conf' \; display-message "Sourced #{@conf_dir}/tmux.conf"

# Toggle light/dark theme with t (used to be show clock)
setenv -g USE_DARK_THEME 1
run-shell 'tmux source-file #{@conf_dir}/theme.conf'
bind -r t run 'tmux setenv -g USE_DARK_THEME #{?USE_DARK_THEME,0,1}' \; run 'tmux source-file #{@conf_dir}/theme.conf'

#
# Panels and windows
#

# Remap new/split window and make them point to the same pwd
unbind '"'
unbind %
bind c new-window      -c "#{pane_current_path}"
bind - split-window    -c "#{pane_current_path}"
bind \\ split-window -h -c "#{pane_current_path}"
bind i last-window

# Change panes with hjkl
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Resize panes with Control-hjkl (repeatable commands)
bind -r C-h resize-pane -L 6
bind -r C-j resize-pane -D 6
bind -r C-k resize-pane -U 6
bind -r C-l resize-pane -R 6

# Move window tabs with < and >
bind -r < swap-window -t -1
bind -r > swap-window -t +1

#
# Copy Mode
#

# Vi navigation in copy-mode (to see all commands: list-keys -t vi-copy)
setw -g mode-keys vi

# Enter copy-mode with Space and go to start of the line (default is [)
bind Space copy-mode \; send -X start-of-line

# Enter copy-mode with Esc
bind Escape copy-mode

# Enter copy-mode scrolling up with C-u
bind C-u copy-mode -u \; send -X start-of-line

# Enter copy-mode with the cursor on the top with u
bind u copy-mode \; send -X start-of-line \; send -X top-line

# Enter copy-mode scrolling up to the last prompt with C-n
# (https://unix.stackexchange.com/questions/226731/jump-to-last-prompt-in-terminal-or-tmux)
bind C-n copy-mode \; send -X start-of-line \; send -X cursor-up \; send -X search-backward "Â "

# Enter copy-mode by searching with /
bind / copy-mode \; command-prompt -ip 'Search up:' 'send -X search-backward-incremental "%%%"'

# Enter copy-mode by grep searching with C-/ (same as C-_)
#bind C-_ copy-mode \; command-prompt -p 'Grep search up:' 'tmux-grep-search.sh "%%%"'

# Swap direction of / and ? searches and make them incremental (search as you type)
bind -T copy-mode-vi / command-prompt -ip 'Search up:' 'send -X search-backward-incremental "%%%"'
bind -T copy-mode-vi ? command-prompt -ip 'Search down:' 'send -X search-forward-incremental "%%%"'

# Esc clear selection, or quit copy-mode if no selection is active
bind -T copy-mode-vi Escape if -F '#{selection_present}' 'send -X clear-selection' 'send -X cancel'

# Paste with p (default was go to previous window)
unbind p
bind p paste-buffer

# Choose buffer history to paste with C-p
bind C-p choose-buffer

# Words separators for copy-mode commands
set -g word-separators " @:()\"'"

# Navigation'
bind -T copy-mode-vi H send -X start-of-line
bind -T copy-mode-vi L send -X end-of-line

# Key sequences for visual selection:
# v  start selection (default is Space)
# V  select until the end of the line
# vv select line (without final newline)
# vw select word under cursor
# vW select WORD under cursor
bind -T copy-mode-vi v send -X begin-selection \; switch-client -T visual-operator-pending
bind -T copy-mode-vi V send -X begin-selection \; send -X end-of-line \; send -X cursor-left
bind -T visual-operator-pending v send -X select-line \; send -X cursor-left
bind -T visual-operator-pending w send -X cursor-right \; send -X select-word
bind -T visual-operator-pending W send -X next-space \; send -X previous-space \; send -X begin-selection \; send -X next-space-end
# reset key table state if "any" other key is pressed
bind -T visual-operator-pending h send -X cursor-left
bind -T visual-operator-pending j send -X cursor-down
bind -T visual-operator-pending k send -X cursor-up
bind -T visual-operator-pending l send -X cursor-right
bind -T visual-operator-pending e send -X next-word
bind -T visual-operator-pending E send -X next-space
bind -T visual-operator-pending 0 send -X start-of-line
# since I'm here, why not enabling repetition of movements?
bind -T visual-operator-pending 1 command-prompt -N -I 1 -p (repeat) 'send -N "%%%"'
bind -T visual-operator-pending 2 command-prompt -N -I 2 -p (repeat) 'send -N "%%%"'
bind -T visual-operator-pending 3 command-prompt -N -I 3 -p (repeat) 'send -N "%%%"'
bind -T visual-operator-pending 4 command-prompt -N -I 4 -p (repeat) 'send -N "%%%"'
bind -T visual-operator-pending 5 command-prompt -N -I 5 -p (repeat) 'send -N "%%%"'
bind -T visual-operator-pending 6 command-prompt -N -I 6 -p (repeat) 'send -N "%%%"'
bind -T visual-operator-pending 7 command-prompt -N -I 7 -p (repeat) 'send -N "%%%"'
bind -T visual-operator-pending 8 command-prompt -N -I 8 -p (repeat) 'send -N "%%%"'
bind -T visual-operator-pending 9 command-prompt -N -I 9 -p (repeat) 'send -N "%%%"'

# Simple command to pipe yanked text to system clipboard (in WSL or Linux with xclip)
yank="command -v clip.exe >/dev/null && cat | clip.exe || xclip -i -f -selection primary | xclip -i -f -selection clipboard"
# Simple command to paste text from system clipboard (in WSL with powershell or Linux with xclip)
paste="(command -v powershell.exe >/dev/null && powershell.exe -command \"Get-Clipboard\" | head -c -2 || xclip -o) | tmux load-buffer - && tmux paste-buffer"

# Key sequences for yank:
# y  copy selection (if exists) and don't exit (default is Enter or C-j)
# Y  copy until the end of the line
# yy copy line (without final newline)
# yw copy word under cursor
# yW copy WORD under cursor
bind -T copy-mode-vi y if -F '#{selection_present}' "send -X copy-pipe \"$yank\"" 'switch-client -T yank-operator-pending'
bind -T copy-mode-vi Y send -X begin-selection \; send -X end-of-line \; send -X cursor-left \; send -X copy-pipe-and-cancel $yank
bind -T yank-operator-pending y send -X select-line \; send -X cursor-left \; send -X copy-pipe-and-cancel $yank
bind -T yank-operator-pending w send -X cursor-right \; send -X select-word \; send -X copy-pipe-and-cancel $yank
bind -T yank-operator-pending W send -X next-space \; send -X previous-space \; send -X begin-selection \; send -X next-space-end \; send -X copy-pipe-and-cancel $yank
bind -T copy-mode-vi Enter send -X copy-pipe-and-cancel $yank
bind -T copy-mode-vi C-j send -X copy-pipe-and-cancel $yank

#######################
###      MOUSE      ###
#######################

# Enable mouse events (clickable windows, panes, resizable panes) - tmux 2.1 and above
set -g mouse on

# Paste on middle-click (exits copy-mode if necessary)
bind -n MouseDown2Pane select-pane \; if -t= -F "#{pane_in_mode}" "send -X cancel" \; run -b $paste

# Enter copy-mode and select word when double clicking in normal mode
bind -n DoubleClick1Pane if -t= -F "#{pane_in_mode}" "" "copy-mode \; send -X select-word \; send -X copy-pipe \"$yank\""

# Copy word and line on multiple clicks
bind -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe $yank
bind -T copy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe $yank

# Don't cancel copy mode after a mouse selection
bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe $yank

# Deselect on single click
bind -T copy-mode-vi MouseDown1Pane select-pane \; send -X clear-selection

# Exit copy mode with right click
bind -T copy-mode-vi MouseDown3Pane select-pane \; send -X cancel

# Deselect before scrolling
bind -T copy-mode-vi WheelUpPane select-pane \; send -X clear-selection \; send -X -N 5 scroll-up
bind -T copy-mode-vi WheelDownPane select-pane \; send -X clear-selection \; send -X -N 5 scroll-down

#######################
###     PLUGINS     ###
#######################

# Clean used variables (they leak to the enviroment)
setenv -gu yank
setenv -gu paste

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
#set -g @plugin 'tmux-plugins/tmux-copycat'
#set -g @plugin 'tmux-plugins/tmux-open'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
set-environment -g TMUX_PLUGIN_MANAGER_PATH "${XDG_DATA_HOME}/tmux/plugins"
run-shell -b "${XDG_DATA_HOME}/tmux/plugins/tpm/tpm"
